#! /usr/bin/env python3

'''Run multiple SSH commands at once from a shell-like REPL'''

import argparse
import atexit
import os
import random
import re
import readline
import sys
from queue import Queue
from shlex import split, quote
from subprocess import run, CompletedProcess, DEVNULL, PIPE, STDOUT
from threading import Thread

RE_HOST_SPLIT = re.compile(r'[ \t\n,;]+')
RE_META_CMD = re.compile(r'^\s*%\s*(.*)')
RE_IGNORE_PREFIX = re.compile(r'^\s*(?:\$\s+)?', re.M)
RE_EXIT = re.compile(r'^\s*exit\s*(?:#.*)?$')


def run_ssh(host: str, cmd: str, q: Queue[CompletedProcess]):
    '''Run bash script putting returncode and output in queue'''
    id = random.randrange(2 ** 128)
    t = Thread(target=_run_ssh, args=(id, host, cmd, q), daemon=True)
    t.start()
    return id


def _run_ssh(
    id: int, host: str, cmd: str, q: Queue[tuple[int, str, CompletedProcess]]
):
    '''helper'''
    q.put((id, host, run(
        ['ssh', host, '--', cmd],
        stdout=PIPE, stderr=STDOUT, stdin=DEVNULL,
        text=True, errors='replace', bufsize=1
    )))


def list_executables(prefix: str = '') -> list[str]:
    '''List executables in path'''
    results = set()
    for dir in os.get_exec_path():
        try:
            files = os.listdir(dir)
        except OSError:
            files = []
        for file in files:
            if not prefix or file.startswith(prefix):
                try:
                    if os.stat(os.path.join(dir, file)).st_mode & 0o111:
                        results.add(file)
                except OSError:
                    pass
    results = sorted(results)
    return [results[0] + ' '] if len(results) == 1 else results


def list_path(prefix: str = '') -> list[str]:
    '''List paths starting with prefix'''
    dir, isdir, prefix = prefix.rpartition('/')
    dir += isdir
    try:
        return sorted(
            os.path.join(dir, file)
            for file in os.listdir(dir) if file.startswith(prefix)
        )
    except OSError:
        return []


def list_hosts(prefix: str = '') -> list[str]:
    '''List hosts in the ~/.ssh/config'''
    prefix = prefix[1:]
    hosts = {'localhost'} if 'localhost'.startswith(prefix) else set()
    try:
        with open(os.path.expanduser('~/.ssh/config')) as file:
            for line in file:
                if (line.split(None, 1) or '.')[0].lower() == 'host':
                    for host in line.partition('#')[0].split()[1:]:
                        if host.startswith(prefix) and '*' not in host:
                            hosts.add(host)
    except OSError:
        pass
    return sorted(hosts)


_completion__list = []
def completion(text: str, state: int):
    '''Run readline completion'''
    with open('readline.log', 'a') as file:
        file.write(f'{text = } {state = }\n')
    if state:
        if state < len(_completion__list):
            return _completion__list[state]
        return None
    _completion__list.clear()
    if not text:
        _completion__list.extend(list_executables())
    elif text.lstrip()[:1] in ('-', '+'):
        _completion__list.extend(list_hosts(text))
    elif text in '..' or '/' in text:
        _completion__list.extend(list_path(text))
    else:
        _completion__list.extend(list_executables(text))
    with open('readline.log', 'a') as file:
        file.write(f'{_completion__list = }\n')
    return _completion__list[0]


def setup_readline():
    '''Set up the readline module (call this only once!)'''
    if os.path.isfile(path := os.path.expanduser('~/.inputrc')):
        readline.read_init_file(path)
    if os.path.isfile(path := os.path.expanduser('~/.mush_history')):
        readline.read_history_file(path)
    atexit.register(readline.write_history_file, path)
    readline.set_completer(completion)
    readline.set_completer_delims('')
    readline.parse_and_bind('tab: complete')


def format(host: str, code: int, text: str) -> str:
    '''Format response text for output'''
    if code:
        msg = f'\033[31;1m⪡ {host}\033[22m ({code})\033[39m'
        return msg + f'\n\033[2m{text}\033[22m'
    msg = f'\033[34;1m⪡ {host}\033[22m ({code})\033[39m'
    return msg + f'\n\033[2m{text}\033[22m'


def main():
    '''run script'''
    # parse arguments
    p = argparse.ArgumentParser(description=__doc__)
    p.add_argument(
        'host', nargs='+',
        help='host(s) to connect to'
    )
    p.add_argument(
        '-m', '--merge', action='store_true',
        help='merge together identical output'
    )
    a = p.parse_args()
    # setup
    setup_readline()
    # repl loop
    q: Queue[tuple[int, str, CompletedProcess]] = Queue()
    while True:
        cmd = input('⫸ ')
        # meta commands
        if r := RE_META_CMD.match(cmd):
            # add or remove host(s)
            if r[1][:1] in ('+', '-'):
                adding = r[1][0] == '+'
                for host in split(cmd[1:]):
                    if host.startswith(('+', '-')):
                        adding = host[0] == '+'
                        if not (host := host[1:]):
                            continue
                    if adding:
                        a.host.append(host)
                    else:
                        a.host = [i for i in a.host if i != host]
                continue
            else:
                sys.stderr.write(f'unrecognized meta command: {quote(r[1])}\n')
                continue
        # system exit
        if RE_EXIT.match(cmd):
            sys.exit()
        # regular command
        cmd = RE_IGNORE_PREFIX.sub('', cmd)
        # send command to all hosts
        hosts = {}
        for host in a.host:
            hosts[run_ssh(host, cmd, q)] = host
        # retrieve results from all hosts
        got_responses = {id: False for id in hosts}
        responses = {}
        for i in range(len(a.host), 0, -1):
            # show remaining hosts
            msg = f'waiting for {i} / {len(a.host)}: ' + ', '.join(
                hosts[id] for id, got_it in got_responses.items() if not got_it
            )
            if not a.merge:
                sys.stderr.write('\n')
            sys.stderr.write(f'\033[33m{msg}\033[39m')
            sys.stderr.flush()
            # receive response from next host
            id, host, proc = q.get()
            got_responses[id] = True
            # clear remaining hosts message
            sys.stderr.write('\010' * len(msg) + '\033[J')
            sys.stderr.flush()
            # store response
            if a.merge:
                content = proc.returncode, proc.stdout
                responses.setdefault(content, []).append(host)
                continue
            # show response (error)
            sys.stdout.write(format(host, proc.returncode, proc.stdout))
            sys.stdout.flush()
        sys.stdout.write('\n')
        # show merged responses
        if a.merge:
            for (code, text), hosts in responses.items():
                sys.stdout.write(format(', '.join(hosts), code, text) + '\n')

if __name__ == '__main__':
    try:
        main()
    except (EOFError, KeyboardInterrupt):
        sys.stderr.write('\n')
